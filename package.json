{
    "name": "hlsl-lsp",
    "displayName": "HLSL Language Server",
    "description": "VSCode extensions for HLSL Language Server",
    "author": "sashi0034",
    "license": "MIT",
    "version": "0.0.1",
    "repository": {
        "type": "git",
        "url": "https://github.com/sashi0034/hlsl-lsp"
    },
    "publisher": "sashi0034",
    "categories": [
        "Programming Languages",
        "Debuggers"
    ],
    "keywords": [
        "hlsl"
    ],
    "bugs": {
        "url": "https://github.com/sashi0034/hlsl-lsp/issues"
    },
    "engines": {
        "vscode": "^1.75.0"
    },
    "icon": "icons/hlsl.png",
    "activationEvents": [
        "onLanguage:hlsl",
        "onLanguage:hlsl-predefined",
        "workspaceContains:**/*.hlsl",
        "onDebug"
    ],
    "main": "./client/out/extension",
    "contributes": {
        "languages": [
            {
                "id": "hlsl",
                "extensions": [
                    ".hlsl"
                ],
                "configuration": "./language-configuration.json",
                "aliases": [
                    "HLSL"
                ],
                "icon": {
                    "light": "icons/hlsl.png",
                    "dark": "icons/hlsl.png"
                }
            },
            {
                "id": "hlsl-predefined",
                "extensions": [
                    ".hlsl.predefined"
                ],
                "filenames": [
                    "hlsl.predefined"
                ],
                "configuration": "./language-configuration.json",
                "aliases": [
                    "HLSL Predefined"
                ],
                "icon": {
                    "light": "icons/hlsl-predefined.png",
                    "dark": "icons/hlsl-predefined.png"
                }
            }
        ],
        "grammars": [
            {
                "language": "hlsl",
                "scopeName": "source.hlsl",
                "path": "./hlsl.tmLanguage.json"
            },
            {
                "language": "hlsl-predefined",
                "scopeName": "source.hlsl",
                "path": "./hlsl.tmLanguage.json"
            }
        ],
        "snippets": [
            {
                "language": "hlsl",
                "path": "./snippets.json"
            }
        ],
        "commands": [
            {
                "command": "hlsl.debug.printGlobalScope",
                "title": "HLSL: Print Global Scope in Current File"
            }
        ],
        "configurationDefaults": {
            "editor.semanticTokenColorCustomizations": {
                "rules": {
                    "builtin": "#00b0e0",
                    "directive": "#ffe020"
                }
            },
            "[hlsl]": {
                "editor.formatOnType": true
            }
        },
        "configuration": {
            "type": "object",
            "title": "HLSL configuration",
            "properties": {
                "hlsl.disableDiagnositcs": {
                    "scope": "window",
                    "type": "boolean",
                    "default": true,
                    "description": "Disable all diagnostics from the language server. This is useful if you only want to use the language server for features like auto-completion and go-to-definition."
                },
                "hlsl.suppressAnalyzerErrors": {
                    "scope": "window",
                    "type": "boolean",
                    "default": true,
                    "description": "Report problems found in the analyzer as warnings instead of errors (true is recommended since the current analyzer is a preview version and has bugs)"
                },
                "hlsl.builtinStringType": {
                    "scope": "window",
                    "type": "string",
                    "default": "string",
                    "description": "The built-in string type used in your application. Can be constructed from string literals."
                },
                "hlsl.builtinArrayType": {
                    "scope": "window",
                    "type": "string",
                    "default": "array",
                    "description": "The built-in array type used in your application. This will handle `Type[]` as `array<Type>`."
                },
                "hlsl.includePath": {
                    "scope": "window",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [],
                    "description": "The include paths used to resolve #include. Specify as relative or absolute paths."
                },
                "hlsl.forceIncludePredefined": {
                    "scope": "window",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [],
                    "description": "Paths (absolute recommended) to one or more `hlsl.predefined` files that will always be included globally, regardless of the project's configuration."
                },
                "hlsl.implicitMutualInclusion": {
                    "scope": "window",
                    "type": "boolean",
                    "default": false,
                    "description": "Project files implicitly include each other (like C# or Java). This works with `hlsl.predefined` as the root."
                },
                "hlsl.hoistEnumParentScope": {
                    "scope": "window",
                    "type": "boolean",
                    "default": false,
                    "description": "Hoist enum members to their parents scope for auto-completion."
                },
                "hlsl.explicitPropertyAccessor": {
                    "scope": "window",
                    "type": "boolean",
                    "default": true,
                    "description": "Controls whether the 'property' keyword is required for virtual property accessors. When set to true, functions must explicitly use the 'property' keyword to be treated as property accessors. When false, compatibility mode for HLSL prior to v2.33.1 is enabled, and functions with 'get_' or 'set_' prefixes are automatically treated as property accessors."
                },
                "hlsl.allowUnicodeIdentifiers": {
                    "scope": "window",
                    "type": "boolean",
                    "default": false,
                    "description": "Controls the use of international characters in the identifiers"
                },
                "hlsl.supportsTypedEnumerations": {
                    "scope": "window",
                    "type": "boolean",
                    "default": false,
                    "description": "Whether your codebase supports typed enumerations."
                },
                "hlsl.supportsForEach": {
                    "scope": "window",
                    "type": "boolean",
                    "default": false,
                    "description": "Whether your codebase supports the foreach construct."
                },
                "hlsl.supportsDigitSeparators": {
                    "scope": "window",
                    "type": "boolean",
                    "default": false,
                    "description": "Whether your codebase supports C++14-style digit separators."
                },
                "hlsl.characterLiterals": {
                    "scope": "window",
                    "type": "boolean",
                    "default": false,
                    "description": "Whether your codebase uses the `asEP_USE_CHARACTER_LITERALS` option."
                },
                "hlsl.formatter.maxBlankLines": {
                    "scope": "window",
                    "type": "number",
                    "default": 1,
                    "description": "Controls the maximum number of blank lines between contents."
                },
                "hlsl.formatter.indentSpaces": {
                    "scope": "window",
                    "type": "number",
                    "default": 4,
                    "description": "Controls the number of spaces for indentation."
                },
                "hlsl.formatter.useTabIndent": {
                    "scope": "window",
                    "type": "boolean",
                    "default": false,
                    "description": "Controls whether to use tabs for indentation instead of spaces."
                },
                "hlsl.trace.server": {
                    "scope": "window",
                    "type": "string",
                    "enum": [
                        "off",
                        "messages",
                        "verbose"
                    ],
                    "default": "off",
                    "description": "Traces the communication between VS Code and the language server."
                }
            }
        },
        "breakpoints": [
            {
                "language": "hlsl"
            }
        ],
        "debuggers": [
            {
                "type": "hlsl-lsp-dap",
                "languages": [
                    "hlsl"
                ],
                "label": "HLSL Debugger (DAP)",
                "configurationAttributes": {
                    "attach": {
                        "properties": {
                            "address": {
                                "type": "string",
                                "description": "IP address of the DAP server to connect to"
                            },
                            "port": {
                                "type": "number",
                                "description": "Port of the DAP debugger to connect to"
                            }
                        },
                        "required": [
                            "address",
                            "port"
                        ]
                    }
                },
                "initialConfigurations": [
                    {
                        "type": "hlsl-lsp-dap",
                        "request": "attach",
                        "name": "Attach to HLSL DAP server",
                        "address": "localhost",
                        "port": 27979
                    }
                ],
                "configurationSnippets": [
                    {
                        "label": "HLSL Debug: Attach",
                        "description": "Configuration for attaching to a DAP server",
                        "body": {
                            "type": "hlsl-lsp-dap",
                            "request": "attach",
                            "name": "Attach to HLSL DAP server",
                            "address": "localhost",
                            "port": 27979
                        }
                    }
                ]
            }
        ]
    },
    "scripts": {
        "vscode:prepublish": "npm run compile",
        "compile": "tsc -b",
        "watch": "tsc -b -w",
        "lint": "eslint ./client/src ./server/src --ext .ts,.tsx",
        "postinstall": "cd client && npm install && cd ../server && npm install && cd ..",
        "test": "sh ./scripts/e2e.sh"
    },
    "devDependencies": {
        "@types/mocha": "^10.0.6",
        "@types/node": "^18.14.6",
        "@typescript-eslint/eslint-plugin": "^7.1.0",
        "@typescript-eslint/parser": "^7.1.0",
        "eslint": "^8.57.0",
        "mocha": "^10.3.0",
        "ts-node": "^10.9.2",
        "typescript": "^5.3.3"
    },
    "dependencies": {
        "@vscode/debugadapter": "^1.61.0",
        "@vscode/debugprotocol": "^1.61.0"
    }
}